tosca_definitions_version: cloudify_dsl_1_2

description: >
  This Blueprint installs the nodecellar application
  on hosts from an existing host-pool using the
  cloudify-host-pool-plugin.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://www.getcloudify.org/spec/host-pool-plugin/1.3.1/plugin.yaml
  - types/nodecellar.yaml
  - types/host-pool-types.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  host_pool_service_endpoint:
    description: >
      URL to the host pool service that will allocate hosts.

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

  mongod:
    type: nodecellar.nodes.MongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  nodejs_host:
    type: nodecellar.nodes.Host

  mongod_host:
    type: nodecellar.nodes.Host

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodejs_host, public_address ] }
      port: { get_property: [nodecellar, port] }

groups:

  scale_up_group:
    members: [haproxy]
    policies:
      haproxy_backend_rate_stress:
        type: cloudify.policies.types.threshold
        properties:
          stability_time: 0
          upper_bound: true
          threshold: 4
          service: .*haproxy.servers.backend.rate$
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: smart_scale
              workflow_parameters:
                delta: 1
                node_id: nodecellar
                scale_compute: true
                min_instances: 2
                max_instances: 6

  scale_down_group:
    members: [haproxy]
    policies:
      haproxy_backend_rate_stress:
        type: cloudify.policies.types.threshold
        properties:
          stability_time: 0
          upper_bound: false
          threshold: 1
          service: .*haproxy.servers.backend.rate$
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: smart_scale
              workflow_parameters:
                delta: -1
                node_id: nodecellar
                scale_compute: true
                min_instances: 2
                max_instances: 6
