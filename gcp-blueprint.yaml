tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application behind
  an haproxy instance on an openstack cloud environment.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.1/types.yaml
  - http://www.getcloudify.org/spec/gcp-plugin/1.0/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - types/nodecellar.yaml
  - types/gcp-types.yaml
  - types/haproxy/haproxy.yaml
  - types/cloud_config/cloud-config.yaml
  - types/scale/scale.yaml

inputs:

  image:
    description: >
      A GCE Image ID. Tested with a Ubuntu 14.04 image.
    default: { get_secret: gcp_ubuntu_trusty_image }

  instance_type:
    description: >
      A GCE instance sytpe.
    default: { get_secret: gcp_small_instance_type }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  agent_key_private:
    default: /opt/manager/resources/agent_key.pem # due to https://cloudifysource.atlassian.net/browse/GCP-39 it needs to be still a file

  haproxy_tag:
    default: haproxy-frontend

  nodecellar_tag:
    default: nodecellar

  mongod_tag:
    default: mongod

dsl_definitions:

  _: &gcp_config
    project: { get_secret: gcp_project_name }
    zone: { get_secret: gcp_zone }
    auth: { get_secret: gcp_auth_file } # due to https://cloudifysource.atlassian.net/browse/GCP-41 it needs to be a path to a file
    network: { get_secret: gcp_management_network_name }

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs
      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      gcp_config: *gcp_config
      tags:
        - { get_input: mongod_tag }
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnetwork

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    instances:
      deploy: 1
    properties:
      gcp_config: *gcp_config
      tags:
        - { get_input: nodecellar_tag }
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnetwork

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      gcp_config: *gcp_config
      tags:
        - { get_input: haproxy_tag }
    relationships:
      - type: cloudify.relationships.depends_on
        target: subnetwork

  mongod_firewall_rule:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      name: mongod_fw
      allowed:
        tcp:
          - 28017
          - { get_property: [ mongod, port ] }
          - 22
      sources:
        - 0.0.0.0/0
      target_tags:
        - { get_input: mongod_tag }


  nodecellar_firewall_rule:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      name: nodecellar_fw
      allowed:
        tcp:
          - { get_property: [ nodecellar, port ] }
          - 22
      sources:
        - 0.0.0.0/0
      target_tags:
        - { get_input: nodecellar_tag }

  haproxy_frontend_firewall_rule:
    type: cloudify.gcp.nodes.FirewallRule
    properties:
      gcp_config: *gcp_config
      name: haproxy_frontend_fw
      allowed:
        tcp:
          - { get_property: [ haproxy, statistics_port ]}
          - { get_property: [ haproxy, frontend_port ] }
          - 22
      sources:
        - 0.0.0.0/0
      target_tags:
        - { get_input: haproxy_tag }

  subnetwork:
    type: cloudify.gcp.nodes.SubNetwork
    properties:
      use_external_resource: true
      name: { get_secret: gcp_management_subnetwork_name }
      region: us-central1
      gcp_config: *gcp_config
    relationships:
      - type: cloudify.gcp.relationships.contained_in_network
        target: network

  network:
    type: cloudify.gcp.nodes.Network
    properties:
      use_external_resource: true
      name: { get_secret: gcp_management_network_name }
      gcp_config: *gcp_config

outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [  haproxy_frontend_host, networkInterfaces, 0, accessConfigs, 0, natIP ] }
      - ':'
      - { get_property: [ haproxy, frontend_port ] }
      - '/'

groups:

  nodejs_host_scale_group:
    members: [nodejs_host]

  scale_up_group:
    members: [nodejs_host]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 6
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                node_id: nodecellar
                scale_compute: true

  scale_down_group:
    members: [nodejs_host]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                node_id: nodecellar
                scale_compute: true

  heal_group:
    members: [nodejs_host]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*nodejs_host.*.cpu.total.system
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }
